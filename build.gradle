plugins {
    id("io.micronaut.application") version "4.5.4"
    id("com.gradleup.shadow") version "8.3.7"
    id("io.micronaut.aot") version "4.5.4"
    id "org.sonarqube" version "6.3.1.5724"
    id "jacoco"
}

version = "0.1"
group = "com.example"

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor("org.projectlombok:lombok")
    annotationProcessor("io.micronaut.data:micronaut-data-processor")
    annotationProcessor("io.micronaut:micronaut-http-validation")
    implementation("io.micronaut.validation:micronaut-validation")
    annotationProcessor("io.micronaut.serde:micronaut-serde-processor")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut.data:micronaut-data-hibernate-jpa")
    implementation("io.micronaut.serde:micronaut-serde-jackson")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    compileOnly("org.projectlombok:lombok")
    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("com.mysql:mysql-connector-j")
    testImplementation("io.micronaut.test:micronaut-test-junit5")
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
    testImplementation("io.micronaut:micronaut-http-client")
}


application {
    mainClass = "com.example.Application"
}
java {
    sourceCompatibility = JavaVersion.toVersion("21")
    targetCompatibility = JavaVersion.toVersion("21")
}


graalvmNative.toolchainDetection = false

micronaut {
    runtime("http_server_jdk")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.example.*")
    }
    aot {
        // Please review carefully the optimizations enabled below
        // Check https://micronaut-projects.github.io/micronaut-aot/latest/guide/ for more details
        optimizeServiceLoading = false
        convertYamlToJava = false
        precomputeOperations = true
        cacheEnvironment = true
        optimizeClassLoading = true
        deduceEnvironment = true
        optimizeNetty = true
        replaceLogbackXml = true
    }
}


tasks.named("dockerfileNative") {
    jdkVersion = "21"
}
jacoco {
    toolVersion = "0.8.12"   // latest as of 2025
}

test {
    useJUnitPlatform()       // if using JUnit 5
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport

        jacoco {
            // Exclude JDK and libraries from being instrumented
            excludes = [
                    "java.*",
                    "javax.*",
                    "jdk.*",
                    "sun.*",
                    "org.slf4j.*",
                    "ch.qos.logback.*",
                    "io.micronaut.*",
                    "jakarta.*",
                    "org.hibernate.*",
                    "com.zaxxer.hikari.*"
            ]
        }
    }

}
def jacocoReport = "${layout.buildDirectory.get().asFile}/reports/jacoco/test/jacocoTestReport.xml"
sonar {
    properties {
        property "sonar.projectKey", "TaskWeekOne"
        property "sonar.projectName", "TaskWeekOne"
        property "sonar.host.url", "http://localhost:9000"
        property "sonar.token", "sqp_f3ebb20fa0b4db01552214f19afcb4093fe52ded"

        // Point SonarQube to JaCoCo XML report
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.coverage.jacoco.xmlReportPaths", jacocoReport

    }
}


